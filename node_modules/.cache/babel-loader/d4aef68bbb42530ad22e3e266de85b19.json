{"ast":null,"code":"var _jsxFileName = \"/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport { useForm } from '../util/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  _s();\n\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallBack, {\n    body: ''\n  });\n  const [createPost, {\n    error\n  }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      }); //Al crearse un nuevo post, debemos traer nuevamente todos los post desde el server, actualizar la cache con el nuevo resultado \n      //y luego mostrarlo desde cache al usuario\n\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data\n      });\n      values.body = '';\n    }\n\n  });\n\n  function createPostCallBack() {\n    createPost();\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          placeholde: \"Hi world!\",\n          name: \"body\",\n          onChange: onChange,\n          error: error ? true : false,\n          value: values.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          color: \"teal\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: error.graphQLErrors[0].message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PostForm, \"pt0k7+GU9lssvTBjRuFSSI2mcr4=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = PostForm;\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id body createdAt username\n      likes {\n        id username createdAt\n      }\n      likeCount\n      comments {\n        id body username createdAt\n      }\n      commentCount\n    }\n  }\n`;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","FETCH_POSTS_QUERY","useForm","PostForm","values","onChange","onSubmit","createPostCallBack","body","createPost","error","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","getPosts","writeQuery","graphQLErrors","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,OAAT,QAAwB,eAAxB;;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA;AAHI,MAIFJ,OAAO,CAACK,kBAAD,EAAqB;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAArB,CAJX;AAMA,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA0BV,WAAW,CAACW,oBAAD,EAAuB;AAChEC,IAAAA,SAAS,EAAER,MADqD;;AAEhES,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACpB,YAAMC,IAAI,GAAIF,KAAK,CAACG,SAAN,CAAgB;AAC5BC,QAAAA,KAAK,EAAEjB;AADqB,OAAhB,CAAd,CADoB,CAGjB;AACH;;AACAe,MAAAA,IAAI,CAACG,QAAL,GAAgB,CAACJ,MAAM,CAACC,IAAP,CAAYP,UAAb,EAAyB,GAAGO,IAAI,CAACG,QAAjC,CAAhB;AACAL,MAAAA,KAAK,CAACM,UAAN,CAAiB;AAAEF,QAAAA,KAAK,EAAEjB,iBAAT;AAA4Be,QAAAA;AAA5B,OAAjB;AACAZ,MAAAA,MAAM,CAACI,IAAP,GAAc,EAAd;AACD;;AAV+D,GAAvB,CAA3C;;AAaA,WAASD,kBAAT,GAA8B;AAC5BE,IAAAA,UAAU;AACX;;AAED,sBAAO;AAAA,4BACL,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEH,QAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,IAAD,CAAM,KAAN;AAAA,gCACE,QAAC,IAAD,CAAM,KAAN;AACE,UAAA,UAAU,EAAC,WADb;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,QAAQ,EAAED,QAHZ;AAIE,UAAA,KAAK,EAAEK,KAAK,GAAG,IAAH,GAAU,KAJxB;AAKE,UAAA,KAAK,EAAEN,MAAM,CAACI;AALhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,KAAK,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,EAeJE,KAAK,iBAAK;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA,6BACT;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA,+BACE;AAAA,oBAAKA,KAAK,CAACW,aAAN,CAAoB,CAApB,EAAuBC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADS;AAAA;AAAA;AAAA;AAAA,YAfN;AAAA,kBAAP;AAqBD,CA7CD;;GAAMnB,Q;UAKAD,O,EAE4BF,W;;;KAP5BG,Q;AA+CN,MAAMQ,oBAAoB,GAAGZ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,eAAeI,QAAf","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { FETCH_POSTS_QUERY } from '../util/graphql';\nimport { useForm } from '../util/hooks';\n\nconst PostForm = () => {\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallBack, { body: '' });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data =  proxy.readQuery({\n        query: FETCH_POSTS_QUERY\n      });//Al crearse un nuevo post, debemos traer nuevamente todos los post desde el server, actualizar la cache con el nuevo resultado \n      //y luego mostrarlo desde cache al usuario\n      data.getPosts = [result.data.createPost, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      values.body = ''; \n    },\n  });\n\n  function createPostCallBack() {\n    createPost(); \n  }\n\n  return <>\n    <Form onSubmit={onSubmit}>\n      <h2>Create a Post</h2>\n      <Form.Field>\n        <Form.Input\n          placeholde=\"Hi world!\"\n          name=\"body\"\n          onChange={onChange}\n          error={error ? true : false}\n          value={values.body} />\n        <Button type=\"submit\" color=\"teal\">\n          Submit\n        </Button>\n      </Form.Field>\n    </Form>\n    {error && (<div className=\"ui error message\">\n      <ul className=\"list\">\n        <li>{error.graphQLErrors[0].message}</li>\n      </ul>\n    </div>)}\n  </>\n};\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id body createdAt username\n      likes {\n        id username createdAt\n      }\n      likeCount\n      comments {\n        id body username createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}