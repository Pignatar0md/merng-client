{"ast":null,"code":"var _jsxFileName = \"/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useForm } from '../util/hooks';\nimport { AuthContext } from '../context/authContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n  const {\n    onChange,\n    onSubmit,\n    values\n  } = useForm(signInUser, {\n    username: '',\n    password: ''\n  });\n  const [loginUser, {\n    loading\n  }] = useMutation(LOGIN_USER, {\n    update(_, {\n      data: {\n        login: userData\n      }\n    }) {\n      //this will be triggered if the mutation is successfully executed\n      context.login(userData);\n      props.history.push('/');\n    },\n\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  function signInUser() {\n    loginUser();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      noValidate: true,\n      className: loading ? \"loading\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Username\",\n        placeholder: \"John Doe\",\n        name: \"username\",\n        value: values.username,\n        type: \"text\",\n        error: errors.username ? true : false,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Password\",\n        type: \"password\",\n        error: errors.password ? true : false,\n        placeholder: \"Jhon1234\",\n        name: \"password\",\n        value: values.password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        primary: true,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), Object.keys(errors).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: Object.values(errors).map(err => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: err\n        }, err, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 43\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Login, \"exenV4i3hsmyHghAOFiQc3yik/o=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = Login;\nconst LOGIN_USER = gql`\n  mutation login ($username: String! $password: String!) {\n    login(username: $username password: $password) {\n      id email token username createdAt\n    }\n  }\n`;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Login.js"],"names":["React","useState","useContext","Form","Button","useMutation","gql","useForm","AuthContext","Login","props","context","errors","setErrors","onChange","onSubmit","values","signInUser","username","password","loginUser","loading","LOGIN_USER","update","_","data","login","userData","history","push","onError","err","graphQLErrors","extensions","exception","variables","Object","keys","length","map"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useForm } from '../util/hooks';\nimport { AuthContext } from '../context/authContext';\n\nconst Login = props => {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(signInUser, {\n    username: '',\n    password: ''\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, { data: { login: userData } }) {//this will be triggered if the mutation is successfully executed\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function signInUser() {\n    loginUser();\n  }\n\n  return <div className=\"form-container\">\n    <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n      <h1>\n        Login\n      </h1>\n      <Form.Input\n        label=\"Username\" \n        placeholder=\"John Doe\" \n        name=\"username\" \n        value={values.username}\n        type=\"text\"\n        error={errors.username ? true: false}\n        onChange={onChange} />\n      <Form.Input\n        label=\"Password\" \n        type=\"password\" \n        error={errors.password ? true: false}\n        placeholder=\"Jhon1234\" \n        name=\"password\" \n        value={values.password}\n        onChange={onChange} />\n\n        <Button type=\"submit\" primary>\n          Login\n        </Button>\n    </Form>\n    {Object.keys(errors).length > 0 && (<div className=\"ui error message\">\n      <ul className=\"list\">\n        {Object.values(errors).map(err => <li key={err}>{err}</li>)}\n      </ul>\n    </div>)}\n  </div>;\n}\n\nconst LOGIN_USER = gql`\n  mutation login ($username: String! $password: String!) {\n    login(username: $username password: $password) {\n      id email token username createdAt\n    }\n  }\n`;\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}