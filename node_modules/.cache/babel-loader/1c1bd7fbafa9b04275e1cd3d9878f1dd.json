{"ast":null,"code":"var _jsxFileName = \"/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Register.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../context/authContext';\nimport { useForm } from '../util/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Register = props => {\n  _s();\n\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n  const {\n    onChange,\n    onSubmit,\n    values\n  } = useForm(registerUser, {\n    username: '',\n    password: '',\n    confirmPassword: '',\n    email: ''\n  });\n  const [addUser, {\n    loading\n  }] = useMutation(REGISTER_USER, {\n    update(_, {\n      data: {\n        register: userData\n      }\n    }) {\n      //this will be triggered if the mutation is successfully executed\n      context.login(userData);\n      props.history.push('/');\n    },\n\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      noValidate: true,\n      className: loading ? \"loading\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Username\",\n        placeholder: \"John Doe\",\n        name: \"username\",\n        value: values.username,\n        type: \"text\",\n        error: errors.username ? true : false,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"E-mail\",\n        type: \"email\",\n        error: errors.email ? true : false,\n        placeholder: \"johndoe@pipmail.com\",\n        name: \"email\",\n        value: values.email,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Password\",\n        type: \"password\",\n        error: errors.password ? true : false,\n        placeholder: \"Jhon1234\",\n        name: \"password\",\n        value: values.password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Confirm Password\",\n        type: \"password\",\n        error: errors.confirmPassword ? true : false,\n        placeholder: \"Jhon1234\",\n        name: \"confirmPassword\",\n        value: values.confirmPassword,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        primary: true,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), Object.keys(errors).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: Object.values(errors).map(err => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: err\n        }, err, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 43\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Register, \"jhLMKrEeqayzxoeN+CfgCKinPmw=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = Register;\nconst REGISTER_USER = gql`\n  mutation register (\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n    ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id email username createdAt token\n    }\n  }\n`;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Register.js"],"names":["React","useContext","useState","Form","Button","useMutation","gql","AuthContext","useForm","Register","props","context","errors","setErrors","onChange","onSubmit","values","registerUser","username","password","confirmPassword","email","addUser","loading","REGISTER_USER","update","_","data","register","userData","login","history","push","onError","err","graphQLErrors","extensions","exception","variables","Object","keys","length","map"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { AuthContext } from '../context/authContext';\nimport { useForm } from '../util/hooks';\n\nconst Register = props => {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: '',\n    password: '',\n    confirmPassword: '',\n    email: ''\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, { data: { register: userData } }) {//this will be triggered if the mutation is successfully executed\n      context.login(userData);\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return <div className=\"form-container\">\n    <Form\n      onSubmit={onSubmit}\n      noValidate\n      className={loading ? \"loading\" : \"\"}>\n      <h1>\n        Register\n      </h1>\n      <Form.Input\n        label=\"Username\" \n        placeholder=\"John Doe\" \n        name=\"username\" \n        value={values.username}\n        type=\"text\"\n        error={errors.username ? true: false}\n        onChange={onChange} />\n      <Form.Input\n        label=\"E-mail\" \n        type=\"email\"\n        error={errors.email ? true: false}\n        placeholder=\"johndoe@pipmail.com\" \n        name=\"email\"\n        value={values.email}\n        onChange={onChange} />\n      <Form.Input\n        label=\"Password\" \n        type=\"password\" \n        error={errors.password ? true: false}\n        placeholder=\"Jhon1234\" \n        name=\"password\" \n        value={values.password}\n        onChange={onChange} />\n      <Form.Input\n        label=\"Confirm Password\" \n        type=\"password\" \n        error={errors.confirmPassword ? true: false}\n        placeholder=\"Jhon1234\" \n        name=\"confirmPassword\"\n        value={values.confirmPassword}\n        onChange={onChange} />\n\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n    </Form>\n    {Object.keys(errors).length > 0 && (<div className=\"ui error message\">\n      <ul className=\"list\">\n        {Object.values(errors).map(err => <li key={err}>{err}</li>)}\n      </ul>\n    </div>)}\n  </div>;\n}\n\nconst REGISTER_USER = gql`\n  mutation register (\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n    ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id email username createdAt token\n    }\n  }\n`;\n\nexport default Register;"]},"metadata":{},"sourceType":"module"}