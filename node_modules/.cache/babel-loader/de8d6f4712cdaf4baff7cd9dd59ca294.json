{"ast":null,"code":"var _jsxFileName = \"/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Components/PostForm.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { FETCH_POST_QUERY } from '../util/graphql';\nimport { useForm } from '../util/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  _s();\n\n  const {\n    values,\n    onChange,\n    onSubmit\n  } = useForm(createPostCallBack, {\n    body: ''\n  });\n  const [createPost, {\n    error\n  }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update: (proxy, result) => {\n      const data = proxy.readQuery({\n        query: FETCH_POST_QUERY\n      }); //Al crearse un nuevo post, debemos traer nuevamente todos los post desde el server, actualizar la cache con el nuevo resultado \n      //y luego mostrarlo desde cache al usuario\n\n      data.getPosts = [result.data.getPosts, ...data.getPosts];\n      proxy.writeQuery({\n        query: FETCH_POST_QUERY,\n        data\n      });\n      values.body = '';\n    }\n  });\n\n  function createPostCallBack() {\n    createPost();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create a Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        placeholde: \"Hi world!\",\n        name: \"body\",\n        onChange: onChange,\n        value: values.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"teal\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this);\n};\n\n_s(PostForm, \"upPCav/qNTfBrUEFe7bmdjw70wA=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = PostForm;\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id body createdAt username\n      likes {\n        id username createdAt\n      }\n      likeCount\n      comments {\n        id body username createdAt\n      }\n      commentCount\n    }\n  }\n`;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Components/PostForm.js"],"names":["React","Button","Form","gql","useMutation","FETCH_POST_QUERY","useForm","PostForm","values","onChange","onSubmit","createPostCallBack","body","createPost","error","CREATE_POST_MUTATION","variables","update","proxy","result","data","readQuery","query","getPosts","writeQuery"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,SAASC,OAAT,QAAwB,eAAxB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA;AAApB,MAAiCJ,OAAO,CAACK,kBAAD,EAAqB;AACjEC,IAAAA,IAAI,EAAE;AAD2D,GAArB,CAA9C;AAIA,QAAM,CAACC,UAAD,EAAa;AAAEC,IAAAA;AAAF,GAAb,IAA0BV,WAAW,CAACW,oBAAD,EAAuB;AAChEC,IAAAA,SAAS,EAAER,MADqD;AAEhES,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzB,YAAMC,IAAI,GAAIF,KAAK,CAACG,SAAN,CAAgB;AAC5BC,QAAAA,KAAK,EAAEjB;AADqB,OAAhB,CAAd,CADyB,CAGtB;AACH;;AACAe,MAAAA,IAAI,CAACG,QAAL,GAAgB,CAACJ,MAAM,CAACC,IAAP,CAAYG,QAAb,EAAuB,GAAGH,IAAI,CAACG,QAA/B,CAAhB;AACAL,MAAAA,KAAK,CAACM,UAAN,CAAiB;AAAEF,QAAAA,KAAK,EAAEjB,gBAAT;AAA2Be,QAAAA;AAA3B,OAAjB;AACAZ,MAAAA,MAAM,CAACI,IAAP,GAAc,EAAd;AACD;AAV+D,GAAvB,CAA3C;;AAaA,WAASD,kBAAT,GAA8B;AAC5BE,IAAAA,UAAU;AACX;;AAED,sBAAO,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEH,QAAhB;AAAA,4BACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,eAEL,QAAC,IAAD,CAAM,KAAN;AAAA,8BACE,QAAC,IAAD,CAAM,KAAN;AACE,QAAA,UAAU,EAAC,WADb;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,QAAQ,EAAED,QAHZ;AAIE,QAAA,KAAK,EAAED,MAAM,CAACI;AAJhB;AAAA;AAAA;AAAA;AAAA,cADF,eAMI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAC,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAaD,CAnCD;;GAAML,Q;UACmCD,O,EAIPF,W;;;KAL5BG,Q;AAqCN,MAAMQ,oBAAoB,GAAGZ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;AAgBA,eAAeI,QAAf","sourcesContent":["import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { FETCH_POST_QUERY } from '../util/graphql';\nimport { useForm } from '../util/hooks';\n\nconst PostForm = () => {\n  const { values, onChange, onSubmit } = useForm(createPostCallBack, {\n    body: ''\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update: (proxy, result) => {\n      const data =  proxy.readQuery({\n        query: FETCH_POST_QUERY\n      });//Al crearse un nuevo post, debemos traer nuevamente todos los post desde el server, actualizar la cache con el nuevo resultado \n      //y luego mostrarlo desde cache al usuario\n      data.getPosts = [result.data.getPosts, ...data.getPosts];\n      proxy.writeQuery({ query: FETCH_POST_QUERY, data });\n      values.body = ''; \n    },\n  });\n\n  function createPostCallBack() {\n    createPost(); \n  }\n\n  return <Form onSubmit={onSubmit}>\n    <h2>Create a Post</h2>\n    <Form.Field>\n      <Form.Input\n        placeholde=\"Hi world!\"\n        name=\"body\"\n        onChange={onChange}\n        value={values.body} />\n        <Button type=\"submit\" color=\"teal\">\n          Submit\n        </Button>\n    </Form.Field>\n  </Form>\n};\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id body createdAt username\n      likes {\n        id username createdAt\n      }\n      likeCount\n      comments {\n        id body username createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}