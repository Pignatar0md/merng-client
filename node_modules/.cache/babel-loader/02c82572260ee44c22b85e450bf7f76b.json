{"ast":null,"code":"var _jsxFileName = \"/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useForm } from '../util/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const [errors, setErrors] = useState({});\n  const [loginUser, {\n    loading\n  }] = useMutation(LOGIN_USER, {\n    update(_, result) {\n      //this will be triggered if the mutation is successfully executed\n      props.history.push('/');\n    },\n\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n\n    variables: values\n  });\n\n  const onSubmit = event => {\n    event.preventDefault(); // if (values.username && values.password && values.email) {\n\n    loginUser(); //esto llama a addUser, que a su vez usa REGISTER_USER, que es igual a: \n    // }\n\n    {\n      /**\n       mutation {\n         register(registerInput:{\n           username: \"lala\"\n           password: \"12345678\"\n           confirmPassword: \"12345678\"\n           email: \"lala@gmail.com\"\n         }) {\n           id\n           email\n           token\n           username\n           createdAt\n         }\n       }\n      */\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      noValidate: true,\n      className: loading ? \"loading\" : \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Username\",\n        placeholder: \"John Doe\",\n        name: \"username\",\n        value: values.username,\n        type: \"text\",\n        error: errors.username ? true : false,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"E-mail\",\n        type: \"email\",\n        error: errors.email ? true : false,\n        placeholder: \"johndoe@pipmail.com\",\n        name: \"email\",\n        value: values.email,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Password\",\n        type: \"password\",\n        error: errors.password ? true : false,\n        placeholder: \"Jhon1234\",\n        name: \"password\",\n        value: values.password,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Confirm Password\",\n        type: \"password\",\n        error: errors.confirmPassword ? true : false,\n        placeholder: \"Jhon1234\",\n        name: \"confirmPassword\",\n        value: values.confirmPassword,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        primary: true,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this), Object.keys(errors).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui error message\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list\",\n        children: Object.values(errors).map(err => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: err\n        }, err, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 43\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 41\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Login, \"/IBul3CIj4Jn/c3TV7eook0/Suw=\", false, function () {\n  return [useMutation];\n});\n\n_c = Login;\nconst LOGIN_USER = gql`\nmutation register (\n  $username: String!\n  $email: String!\n  $password: String!\n  $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id email username createdAt token\n    }\n  }\n`;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/marcelopignataro/DocumentosNoIcloud/mernDojo/5hMernGProject/client/src/Pages/Login.js"],"names":["React","useState","Form","Button","useMutation","gql","useForm","Login","props","errors","setErrors","loginUser","loading","LOGIN_USER","update","_","result","history","push","onError","err","graphQLErrors","extensions","exception","variables","values","onSubmit","event","preventDefault","username","onChange","email","password","confirmPassword","Object","keys","length","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { useForm } from '../util/hooks';\n\nconst Login = props => {\n  const [errors, setErrors] = useState({});\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, result) {//this will be triggered if the mutation is successfully executed\n      props.history.push('/');\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values\n  });\n\n  const onSubmit = event => {\n    event.preventDefault();\n    // if (values.username && values.password && values.email) {\n      loginUser();//esto llama a addUser, que a su vez usa REGISTER_USER, que es igual a: \n    // }\n    {/**\n      mutation {\n        register(registerInput:{\n          username: \"lala\"\n          password: \"12345678\"\n          confirmPassword: \"12345678\"\n          email: \"lala@gmail.com\"\n        }) {\n          id\n          email\n          token\n          username\n          createdAt\n        }\n      }\n    */}\n  }\n\n  return <div className=\"form-container\">\n    <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n      <h1>\n        Register\n      </h1>\n      <Form.Input\n        label=\"Username\" \n        placeholder=\"John Doe\" \n        name=\"username\" \n        value={values.username}\n        type=\"text\"\n        error={errors.username ? true: false}\n        onChange={onChange} />\n      <Form.Input\n        label=\"E-mail\" \n        type=\"email\"\n        error={errors.email ? true: false}\n        placeholder=\"johndoe@pipmail.com\" \n        name=\"email\"\n        value={values.email}\n        onChange={onChange} />\n      <Form.Input\n        label=\"Password\" \n        type=\"password\" \n        error={errors.password ? true: false}\n        placeholder=\"Jhon1234\" \n        name=\"password\" \n        value={values.password}\n        onChange={onChange} />\n      <Form.Input\n        label=\"Confirm Password\" \n        type=\"password\" \n        error={errors.confirmPassword ? true: false}\n        placeholder=\"Jhon1234\" \n        name=\"confirmPassword\"\n        value={values.confirmPassword}\n        onChange={onChange} />\n\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n    </Form>\n    {Object.keys(errors).length > 0 && (<div className=\"ui error message\">\n      <ul className=\"list\">\n        {Object.values(errors).map(err => <li key={err}>{err}</li>)}\n      </ul>\n    </div>)}\n  </div>;\n}\n\nconst LOGIN_USER = gql`\nmutation register (\n  $username: String!\n  $email: String!\n  $password: String!\n  $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id email username createdAt token\n    }\n  }\n`;\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}